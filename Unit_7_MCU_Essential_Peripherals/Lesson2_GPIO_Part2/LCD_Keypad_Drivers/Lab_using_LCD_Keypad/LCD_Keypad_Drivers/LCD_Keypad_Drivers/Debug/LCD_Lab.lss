
LCD_Lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000001bc  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a7d  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072b  00000000  00000000  00000dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000043d  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  00001928  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042a  00000000  00000000  00001a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000300  00000000  00000000  00001e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000214a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec eb       	ldi	r30, 0xBC	; 188
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 cd 00 	call	0x19a	; 0x19a <main>
  7a:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_KICK>:
 */ 
#include "LCD.h"
#include "stdlib.h"
void LCD_KICK()
{
	LCD_CRTL &=  ~(1<<ENABLE_SWITCH); // Make PIN(E) disabled To ensure that doesn't exist any command is executing while checking LCD BUSY
  82:	88 b3       	in	r24, 0x18	; 24
  84:	8e 7f       	andi	r24, 0xFE	; 254
  86:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	83 ed       	ldi	r24, 0xD3	; 211
  8a:	90 e3       	ldi	r25, 0x30	; 48
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <LCD_KICK+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <LCD_KICK+0x10>
  92:	00 00       	nop
	_delay_ms(50);
	LCD_CRTL |=  (1<<ENABLE_SWITCH); // Return PIN(E) enabled [ To execute any command I want after then)
  94:	88 b3       	in	r24, 0x18	; 24
  96:	81 60       	ori	r24, 0x01	; 1
  98:	88 bb       	out	0x18, r24	; 24
  9a:	08 95       	ret

0000009c <LCD_isbusy>:
	LCD_Write_Command(LCD_CLEAR_SCREEN);
}

void LCD_isbusy()
{
	DataDir_LCD_PORT = 0x00; //  make PORTA work as Input
  9c:	1a ba       	out	0x1a, r1	; 26
	LCD_CRTL |=  (1<<RW_SWITCH); //read mode
  9e:	88 b3       	in	r24, 0x18	; 24
  a0:	82 60       	ori	r24, 0x02	; 2
  a2:	88 bb       	out	0x18, r24	; 24
	LCD_CRTL &=  ~(1<<RS_SWITCH); //read mode
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	8b 7f       	andi	r24, 0xFB	; 251
  a8:	88 bb       	out	0x18, r24	; 24
	LCD_KICK(); // D7 ifBusy --> OFF  , Else --> ON 
  aa:	0e 94 41 00 	call	0x82	; 0x82 <LCD_KICK>
	DataDir_LCD_PORT = 0xFF; //  return PORTA work as Output	
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	8a bb       	out	0x1a, r24	; 26
	LCD_CRTL &=  ~(1<<RW_SWITCH);
  b2:	88 b3       	in	r24, 0x18	; 24
  b4:	8d 7f       	andi	r24, 0xFD	; 253
  b6:	88 bb       	out	0x18, r24	; 24
  b8:	08 95       	ret

000000ba <LCD_Write_Command>:
	LCD_Write_Command(LCD_BEGIN_AT_FIRST_RAW);
	LCD_Write_Command(LCD_DISP_ON_CURSOR_BLINK);
}

void LCD_Write_Command(unsigned char command)
{
  ba:	cf 93       	push	r28
  bc:	c8 2f       	mov	r28, r24
	#ifdef	EIGHT_BIT_MODE
	LCD_isbusy();
  be:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_isbusy>
	LCD_PORT = command;
  c2:	cb bb       	out	0x1b, r28	; 27
	LCD_CRTL &= ~(1<<RW_SWITCH | 1<<RS_SWITCH); // Write Command Mode
  c4:	88 b3       	in	r24, 0x18	; 24
  c6:	89 7f       	andi	r24, 0xF9	; 249
  c8:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
  ca:	0e 94 41 00 	call	0x82	; 0x82 <LCD_KICK>
	#endif
	
	#ifdef	FOUR_BIT_MODE
	
	#endif
}
  ce:	cf 91       	pop	r28
  d0:	08 95       	ret

000000d2 <LCD_GOTO_XY>:
	_delay_ms(50);
	LCD_CRTL |=  (1<<ENABLE_SWITCH); // Return PIN(E) enabled [ To execute any command I want after then)
}
void LCD_GOTO_XY(unsigned char line , unsigned char position)
{
	if((position >= 0) && (position < 16))
  d2:	60 31       	cpi	r22, 0x10	; 16
  d4:	68 f4       	brcc	.+26     	; 0xf0 <LCD_GOTO_XY+0x1e>
	{
		if(line == 1)
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	29 f4       	brne	.+10     	; 0xe4 <LCD_GOTO_XY+0x12>
		{
			LCD_Write_Command(LCD_BEGIN_AT_FIRST_RAW + position);
  da:	80 e8       	ldi	r24, 0x80	; 128
  dc:	86 0f       	add	r24, r22
  de:	0e 94 5d 00 	call	0xba	; 0xba <LCD_Write_Command>
  e2:	08 95       	ret
		}
		else if(line == 2)
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	21 f4       	brne	.+8      	; 0xf0 <LCD_GOTO_XY+0x1e>
		{
			LCD_Write_Command(LCD_BEGIN_AT_SECOND_RAW + position);
  e8:	80 ec       	ldi	r24, 0xC0	; 192
  ea:	86 0f       	add	r24, r22
  ec:	0e 94 5d 00 	call	0xba	; 0xba <LCD_Write_Command>
  f0:	08 95       	ret

000000f2 <LCD_Clear_Screen>:
		}	
	}
}
void LCD_Clear_Screen(void)
{
	LCD_Write_Command(LCD_CLEAR_SCREEN);
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	0e 94 5d 00 	call	0xba	; 0xba <LCD_Write_Command>
  f8:	08 95       	ret

000000fa <LCD_Init>:
  fa:	87 e8       	ldi	r24, 0x87	; 135
  fc:	93 e1       	ldi	r25, 0x13	; 19
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <LCD_Init+0x4>
 102:	00 c0       	rjmp	.+0      	; 0x104 <LCD_Init+0xa>
 104:	00 00       	nop
void LCD_Init(void)
{
	_delay_ms(20);
	
	#ifdef	EIGHT_BIT_MODE
	LCD_isbusy();	
 106:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_isbusy>
	DataDir_LCD_CTRL |= (1<<RW_SWITCH | 1<<RS_SWITCH | 1<<ENABLE_SWITCH);//make (E,RS,RW) OUTPUT PINS
 10a:	87 b3       	in	r24, 0x17	; 23
 10c:	87 60       	ori	r24, 0x07	; 7
 10e:	87 bb       	out	0x17, r24	; 23
	LCD_CRTL &= ~(1<<RW_SWITCH | 1<<RS_SWITCH | 1<<ENABLE_SWITCH);//make control pins off to do (reset/set) according the command we want to do after then
 110:	88 b3       	in	r24, 0x18	; 24
 112:	88 7f       	andi	r24, 0xF8	; 248
 114:	88 bb       	out	0x18, r24	; 24
	LCD_Clear_Screen();
 116:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_Clear_Screen>
	LCD_Write_Command(LCD_FUNCTION_8BIT_2LINES);
 11a:	88 e3       	ldi	r24, 0x38	; 56
 11c:	0e 94 5d 00 	call	0xba	; 0xba <LCD_Write_Command>
	#endif
	
	#ifdef	FOUR_BIT_MODE
	LCD_Write_Command(LCD_FUNCTION_4BIT_2LINES);
	#endif	
	LCD_Write_Command(LCD_ENTRY_MODE);
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	0e 94 5d 00 	call	0xba	; 0xba <LCD_Write_Command>
	LCD_Write_Command(LCD_BEGIN_AT_FIRST_RAW);
 126:	80 e8       	ldi	r24, 0x80	; 128
 128:	0e 94 5d 00 	call	0xba	; 0xba <LCD_Write_Command>
	LCD_Write_Command(LCD_DISP_ON_CURSOR_BLINK);
 12c:	8f e0       	ldi	r24, 0x0F	; 15
 12e:	0e 94 5d 00 	call	0xba	; 0xba <LCD_Write_Command>
 132:	08 95       	ret

00000134 <LCD_Write_Char>:
	#ifdef	FOUR_BIT_MODE
	
	#endif
}
void LCD_Write_Char(unsigned char data)
{
 134:	cf 93       	push	r28
 136:	c8 2f       	mov	r28, r24
	#ifdef	EIGHT_BIT_MODE
	LCD_isbusy();
 138:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_isbusy>
	LCD_PORT = data;
 13c:	cb bb       	out	0x1b, r28	; 27
	// Write data Mode
	LCD_CRTL |= (1<<RS_SWITCH);
 13e:	88 b3       	in	r24, 0x18	; 24
 140:	84 60       	ori	r24, 0x04	; 4
 142:	88 bb       	out	0x18, r24	; 24
	LCD_CRTL &= ~(1<<RW_SWITCH);
 144:	88 b3       	in	r24, 0x18	; 24
 146:	8d 7f       	andi	r24, 0xFD	; 253
 148:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
 14a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_KICK>
	#endif
	
	#ifdef	FOUR_BIT_MODE
	
	#endif
}
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <LCD_Write_String>:
void LCD_Write_String(char *data)
{
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	8c 01       	movw	r16, r24
	#ifdef	EIGHT_BIT_MODE
	unsigned char counter = 0;
 15a:	c0 e0       	ldi	r28, 0x00	; 0
	while(*data > 0 )
 15c:	16 c0       	rjmp	.+44     	; 0x18a <LCD_Write_String+0x38>
	{
		LCD_Write_Char(*data++);
 15e:	0f 5f       	subi	r16, 0xFF	; 255
 160:	1f 4f       	sbci	r17, 0xFF	; 255
 162:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Write_Char>
		counter++;
 166:	cf 5f       	subi	r28, 0xFF	; 255
		if(counter == 16)
 168:	c0 31       	cpi	r28, 0x10	; 16
 16a:	29 f4       	brne	.+10     	; 0x176 <LCD_Write_String+0x24>
		{
			LCD_GOTO_XY(2,0);
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_GOTO_XY>
 174:	0a c0       	rjmp	.+20     	; 0x18a <LCD_Write_String+0x38>
		}
		else if(counter == 32)
 176:	c0 32       	cpi	r28, 0x20	; 32
 178:	41 f4       	brne	.+16     	; 0x18a <LCD_Write_String+0x38>
		{
			LCD_Write_Command(LCD_CLEAR_SCREEN);
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	0e 94 5d 00 	call	0xba	; 0xba <LCD_Write_Command>
			LCD_GOTO_XY(1,0);
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_GOTO_XY>
			counter = 0;
 188:	c0 e0       	ldi	r28, 0x00	; 0
}
void LCD_Write_String(char *data)
{
	#ifdef	EIGHT_BIT_MODE
	unsigned char counter = 0;
	while(*data > 0 )
 18a:	f8 01       	movw	r30, r16
 18c:	80 81       	ld	r24, Z
 18e:	81 11       	cpse	r24, r1
 190:	e6 cf       	rjmp	.-52     	; 0x15e <LCD_Write_String+0xc>
	#endif
	
	#ifdef	FOUR_BIT_MODE
	
	#endif
}
 192:	cf 91       	pop	r28
 194:	1f 91       	pop	r17
 196:	0f 91       	pop	r16
 198:	08 95       	ret

0000019a <main>:
#include "DIO_Interface.h"
#include "LCD.h"

int main(void)
{
   LCD_Init();
 19a:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_Init>
   //LCD_Write_Char('A');
   LCD_Write_String("Eslam Salma/E");
 19e:	80 e6       	ldi	r24, 0x60	; 96
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_Write_String>
   LCD_GOTO_XY(2,33);
 1a6:	61 e2       	ldi	r22, 0x21	; 33
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_GOTO_XY>
   LCD_Write_String("amir/amir/amir/amir");
 1ae:	8e e6       	ldi	r24, 0x6E	; 110
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_Write_String>
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <main+0x1c>

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
