/*
 * STM32F103C6_GPIO.c
 *
 *  Created on: Jul 16, 2023
 *      Author: Amir
 */
#include "STM32F103C6_GPIO.h"

uint8_t GET_CRLH_Position(uint16_t PinNumber)
{
	switch(PinNumber)
	{
	// CRL Register
	case GPIO_PIN_0 :
		return 0;
		break;
	case GPIO_PIN_1 :
		return 4;
		break;
	case GPIO_PIN_2 :
		return 8;
		break;
	case GPIO_PIN_3 :
		return 12;
		break;
	case GPIO_PIN_4 :
		return 16;
		break;
	case GPIO_PIN_5 :
		return 20;
		break;
	case GPIO_PIN_6 :
		return 24;
		break;
	case GPIO_PIN_7 :
		return 28;
		break;
	// CRH Register
	case GPIO_PIN_8 :
		return 0;
		break;
	case GPIO_PIN_9 :
		return 4;
		break;
	case GPIO_PIN_10 :
		return 8;
		break;
	case GPIO_PIN_11 :
		return 12;
		break;
	case GPIO_PIN_12 :
		return 16;
		break;
	case GPIO_PIN_13 :
		return 20;
		break;
	case GPIO_PIN_14 :
		return 24;
		break;
	case GPIO_PIN_15 :
		return 28;
		break;
	}
	return 0;
}

/**================================================================
 * @Fn			-MCAL_GPIO_Init
 * @brief 		-Initialize GPIOx PINy according to the specified parameters in PinConfig
 * @param [in]   -GPIOx : were x can be (A...G depending on device used)to select the GPIO Peripheral
 * @param [in]   -PinConfig : pointer to GPIO_PinConfig_t Structure that Contains
 * 				 the configuration information for the specified GPIO PIN.
 * @retval		-none
 * Note			-STM32F103C6 MCU have GPIO A,B,C,D,E Modules
 * 				 But LQFP48 package has A,B,PART Part of C/D exported as external PINS from the Modules
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx , GPIO_PINConfig_t *PinConfig)
{
	//Port configuration register low (GPIOx_CRL) Configure PINS from Pin 0 ---> 7
	//Port configuration register high (GPIOx_CRH)Configure PINS from Pin 8 ---> 15
	volatile uint32_t* Config_Register = NULL;
	uint8_t Pin_Config = 0;
	Config_Register = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH ;

	// Clear CNFx[1:0] MODEx[1:0] where x is Number of Pin from (0 ---> 15)
	(*Config_Register) &= ~(0xF << (GET_CRLH_Position(PinConfig->GPIO_PinNumber)) );

	// if Pin is Output
	 if((PinConfig->GPIO_PinMode == GPIO_MODE_Output_PP) || (PinConfig->GPIO_PinMode == GPIO_MODE_Output_OD) || (PinConfig->GPIO_PinMode == GPIO_MODE_Output_PP) || (PinConfig->GPIO_PinMode == GPIO_MODE_AF_Output_PP) || (PinConfig->GPIO_PinMode == GPIO_MODE_AF_Output_OD))
	 {
		 if((PinConfig->GPIO_Output_Speed == GPIO_MAX_Speed_2) || (PinConfig->GPIO_Output_Speed == GPIO_MAX_Speed_10) || (PinConfig->GPIO_Output_Speed == GPIO_MAX_Speed_50))
		 // Set CNFx[1:0] MODEx[1:0] where x is Number of Pin from (0 ---> 15)
		 Pin_Config = ( (((PinConfig->GPIO_PinMode - 4 ) << 2) | (0x03 << PinConfig->GPIO_Output_Speed)) & 0x0F );
	 }
	 // if Pin is Intput
	 else
	 {

	 }
	 (*Config_Register) |= (Pin_Config << (GET_CRLH_Position(PinConfig->GPIO_PinNumber)) );
}


/**================================================================
 * @Fn			-MCAL_GPIO_DeInit
 * @brief 		-Reset GPIOx
 * @param [in]   -GPIOx : were x can be (A...G depending on device used)to select the GPIO Peripheral
 * @retval		-none
 * Note			-none
 */
void MCAL_GPIO_DeInit(GPIO_TypeDef *GPIOx)
{

}

/**================================================================
 * @Fn			-MCAL_GPIO_ReadPin
 * @brief 		-Read Specific PIN Value
 * @param [in]   -GPIOx : were x can be (A...G depending on device used)to select the GPIO Peripheral
 * @param [in]   -PinNumber : Specifies The Port bit to Read According  to @ref GPIO_PINS_Define
 * @retval		-The input Pin value (Two Values based on @ref GPIO_PIN_state
 * Note			-none
 */
uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx , uint16_t PinNumber)
{

}

/**================================================================
 * @Fn			-MCAL_GPIO_ReadPort
 * @brief 		-Read Specific PORT Value
 * @param [in]   -GPIOx : were x can be (A...G depending on device used)to select the GPIO Peripheral
 * @retval		-The input PORT value
 * Note			-none
 */
uint16_t MCAL_GPIO_ReadPort(GPIO_TypeDef *GPIOx)
{

}

/**================================================================
 * @Fn			-MCAL_GPIO_WritePin
 * @brief 		-Write Specific PIN Value
 * @param [in]   -GPIOx : were x can be (A...G depending on device used)to select the GPIO Peripheral
 * @param [in]   -PinNumber :  Specifies The Port bit to Write According  to @ref GPIO_PINS_Define
 * @param [in]   -Value : Pin Value
 * @retval		-none
 * Note			-none
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx , uint16_t PinNumber , uint8_t Value)
{

}

/**================================================================
 * @Fn			-MCAL_GPIO_WritePort
 * @brief 		-Write Specific PORT Value
 * @param [in]   -GPIOx : were x can be (A...G depending on device used)to select the GPIO Peripheral
 * @param [in]   -Value : Port Value
 * @retval		-none
 * Note			-none
 */
void MCAL_GPIO_WritePort(GPIO_TypeDef *GPIOx , uint16_t Value)
{

}

/**================================================================
 * @Fn			-MCAL_GPIO_TogglePin
 * @brief 		-Toggle Specific PIN Value
 * @param [in]   -GPIOx : were x can be (A...E depending on device used)to select the GPIO Peripheral
 * @param [in]   -PinNumber : Specifies The Port bit to Toggle According  to @ref GPIO_PINS_Define
 * @retval		-Result of Locking The Pin (OK --> Locking pin Success , Error --> Locking pin Failed)
 * 				 According to @ref GPIO_PIN_LOCK_State
 * Note			-none
 */
void MCAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx , uint16_t PinNumber)
{

}

/**================================================================
 * @Fn			-MCAL_GPIO_LockPin
 * @brief 		-Lock Specific PIN
 * @param [in]   -GPIOx : were x can be (A...E depending on device used)to select the GPIO Peripheral
 * @param [in]   -PinNumber : Specifies The Port bit to be Locked According  to @ref GPIO_PINS_Define
 * @retval		-Ok if pin Config locked Or ERROR if pin Config not locked (OK & ERROR are defined @ref GPIO_PIN_LOCK_State)
 * Note			-none
 */
uint8_t MCAL_GPIO_LockPin(GPIO_TypeDef *GPIOx , uint16_t PinNumber)
{

}
