/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include "STM32F103x6.h"
#include "STM32F103C6_GPIO.h".h"

void clock_init()
{
	//Enable Init Clock GPIOA
	RCC_GPIOA_CLK_EN() ;

	//Enable Init Clock GPIOB
	RCC_GPIOB_CLK_EN() ;
}

void GPIO_init()
{

	//PA1 (Floating/High-Z) Input
	GPIO_PINConfig_t Config_PA1;
	Config_PA1->GPIO_PinNumber = GPIO_PIN_0;
	Config_PA1->GPIO_PinMode   = GPIO_MODE_Input_FLO;
	MCAL_GPIO_Init(&GPIOA, &Config_PA1);
	GPIOA_CRL |= (0b01<<6);

	//PB1 Push_Pull Output
	//00: General purpose output push-pull
	//01: Output mode, max speed 10 MHz.
	GPIOB_CRL |= (0b01<<4);

	//PA13 (Floating/High-Z) Input
	//00: Input mode (reset state)
	//01: Floating input (reset state)
	GPIOA_CRH |= (0b01<<22);

	//PB13 Push_Pull Output
	//00: General purpose output push-pull
	//01: Output mode, max speed 10 MHz.
	GPIOB_CRH |= (0b01<<20);

}

void delay(unsigned int x)
{
	unsigned int i,j;
	for(i=0;i<x;i++)
		for(j=0;j<255;j++);
}
int main(void)
{
	clock_init();
	GPIO_init();


	while(1)
	{
		// PA1 Bottom >> Pull_UP_R
		if( ((GPIOA_IDR & (1<<1) ) >> 1) == 0) //Press
		{
			GPIOB_ODR ^= (1<<1); //Toggle LED
			while( ((GPIOA_IDR & (1<<1) ) >> 1) == 0);//Single Press
		}
		// PA13 Bottom >> Pull_Down_R
		if( ((GPIOA_IDR & (1<<13) ) >> 13) == 1) // Multi Pressing
		{
			GPIOB_ODR ^= (1<<13);//Toggle LED
		}

		delay(1);
	}
}


