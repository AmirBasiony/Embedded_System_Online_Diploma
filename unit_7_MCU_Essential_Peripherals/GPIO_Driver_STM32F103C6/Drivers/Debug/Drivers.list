
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000464  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000594  0800059c  0001059c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000594  08000594  0001059c  2**0
                  CONTENTS
  4 .ARM          00000000  08000594  08000594  0001059c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000594  0800059c  0001059c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000594  08000594  00010594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000598  08000598  00010598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001059c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800059c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800059c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001059c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001930  00000000  00000000  000105c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000441  00000000  00000000  00011ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000478  00000000  00000000  00012336  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000c8  00000000  00000000  000127b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000a0  00000000  00000000  00012878  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001b0e  00000000  00000000  00012918  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000d33  00000000  00000000  00014426  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000076ed  00000000  00000000  00015159  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001c846  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000258  00000000  00000000  0001c8c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800057c 	.word	0x0800057c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800057c 	.word	0x0800057c

08000170 <GET_CRLH_Position>:
 */
#include "STM32F103C6_GPIO.h"
#include "STM32F103x6.h"

uint8_t GET_CRLH_Position(uint16_t PinNumber)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b80      	cmp	r3, #128	; 0x80
 800017e:	d042      	beq.n	8000206 <GET_CRLH_Position+0x96>
 8000180:	2b80      	cmp	r3, #128	; 0x80
 8000182:	dc11      	bgt.n	80001a8 <GET_CRLH_Position+0x38>
 8000184:	2b08      	cmp	r3, #8
 8000186:	d036      	beq.n	80001f6 <GET_CRLH_Position+0x86>
 8000188:	2b08      	cmp	r3, #8
 800018a:	dc06      	bgt.n	800019a <GET_CRLH_Position+0x2a>
 800018c:	2b02      	cmp	r3, #2
 800018e:	d02e      	beq.n	80001ee <GET_CRLH_Position+0x7e>
 8000190:	2b04      	cmp	r3, #4
 8000192:	d02e      	beq.n	80001f2 <GET_CRLH_Position+0x82>
 8000194:	2b01      	cmp	r3, #1
 8000196:	d028      	beq.n	80001ea <GET_CRLH_Position+0x7a>
 8000198:	e047      	b.n	800022a <GET_CRLH_Position+0xba>
 800019a:	2b20      	cmp	r3, #32
 800019c:	d02f      	beq.n	80001fe <GET_CRLH_Position+0x8e>
 800019e:	2b40      	cmp	r3, #64	; 0x40
 80001a0:	d02f      	beq.n	8000202 <GET_CRLH_Position+0x92>
 80001a2:	2b10      	cmp	r3, #16
 80001a4:	d029      	beq.n	80001fa <GET_CRLH_Position+0x8a>
 80001a6:	e040      	b.n	800022a <GET_CRLH_Position+0xba>
 80001a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001ac:	d033      	beq.n	8000216 <GET_CRLH_Position+0xa6>
 80001ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001b2:	dc09      	bgt.n	80001c8 <GET_CRLH_Position+0x58>
 80001b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80001b8:	d029      	beq.n	800020e <GET_CRLH_Position+0x9e>
 80001ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001be:	d028      	beq.n	8000212 <GET_CRLH_Position+0xa2>
 80001c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001c4:	d021      	beq.n	800020a <GET_CRLH_Position+0x9a>
 80001c6:	e030      	b.n	800022a <GET_CRLH_Position+0xba>
 80001c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001cc:	d027      	beq.n	800021e <GET_CRLH_Position+0xae>
 80001ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001d2:	dc03      	bgt.n	80001dc <GET_CRLH_Position+0x6c>
 80001d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001d8:	d01f      	beq.n	800021a <GET_CRLH_Position+0xaa>
 80001da:	e026      	b.n	800022a <GET_CRLH_Position+0xba>
 80001dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80001e0:	d01f      	beq.n	8000222 <GET_CRLH_Position+0xb2>
 80001e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80001e6:	d01e      	beq.n	8000226 <GET_CRLH_Position+0xb6>
 80001e8:	e01f      	b.n	800022a <GET_CRLH_Position+0xba>
	{
	// CRL Register
	case GPIO_PIN_0 :
		return 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	e01e      	b.n	800022c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1 :
		return 4;
 80001ee:	2304      	movs	r3, #4
 80001f0:	e01c      	b.n	800022c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2 :
		return 8;
 80001f2:	2308      	movs	r3, #8
 80001f4:	e01a      	b.n	800022c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3 :
		return 12;
 80001f6:	230c      	movs	r3, #12
 80001f8:	e018      	b.n	800022c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4 :
		return 16;
 80001fa:	2310      	movs	r3, #16
 80001fc:	e016      	b.n	800022c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5 :
		return 20;
 80001fe:	2314      	movs	r3, #20
 8000200:	e014      	b.n	800022c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6 :
		return 24;
 8000202:	2318      	movs	r3, #24
 8000204:	e012      	b.n	800022c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7 :
		return 28;
 8000206:	231c      	movs	r3, #28
 8000208:	e010      	b.n	800022c <GET_CRLH_Position+0xbc>
		break;
		// CRH Register
	case GPIO_PIN_8 :
		return 0;
 800020a:	2300      	movs	r3, #0
 800020c:	e00e      	b.n	800022c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9 :
		return 4;
 800020e:	2304      	movs	r3, #4
 8000210:	e00c      	b.n	800022c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10 :
		return 8;
 8000212:	2308      	movs	r3, #8
 8000214:	e00a      	b.n	800022c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11 :
		return 12;
 8000216:	230c      	movs	r3, #12
 8000218:	e008      	b.n	800022c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12 :
		return 16;
 800021a:	2310      	movs	r3, #16
 800021c:	e006      	b.n	800022c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13 :
		return 20;
 800021e:	2314      	movs	r3, #20
 8000220:	e004      	b.n	800022c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14 :
		return 24;
 8000222:	2318      	movs	r3, #24
 8000224:	e002      	b.n	800022c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15 :
		return 28;
 8000226:	231c      	movs	r3, #28
 8000228:	e000      	b.n	800022c <GET_CRLH_Position+0xbc>
		break;
	}
	return 0;
 800022a:	2300      	movs	r3, #0
}
 800022c:	4618      	mov	r0, r3
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr

08000236 <MCAL_GPIO_Init>:
 * @retval		-none
 * Note			-STM32F103C6 MCU have GPIO A,B,C,D,E Modules
 * 				 But LQFP48 package has A,B,PART Part of C/D exported as external PINS from the Modules
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx , GPIO_PINConfig_t *PinConfig)
{
 8000236:	b590      	push	{r4, r7, lr}
 8000238:	b085      	sub	sp, #20
 800023a:	af00      	add	r7, sp, #0
 800023c:	6078      	str	r0, [r7, #4]
 800023e:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from Pin 0 ---> 7
	//Port configuration register high (GPIOx_CRH)Configure PINS from Pin 8 ---> 15
	volatile uint32_t* Config_Register = NULL;
 8000240:	2300      	movs	r3, #0
 8000242:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_Config = 0;
 8000244:	2300      	movs	r3, #0
 8000246:	73fb      	strb	r3, [r7, #15]
	Config_Register = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH ;
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	b29b      	uxth	r3, r3
 800024e:	2bff      	cmp	r3, #255	; 0xff
 8000250:	d801      	bhi.n	8000256 <MCAL_GPIO_Init+0x20>
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	e001      	b.n	800025a <MCAL_GPIO_Init+0x24>
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	3304      	adds	r3, #4
 800025a:	60bb      	str	r3, [r7, #8]

	// Clear CNFx[1:0] MODEx[1:0] where x is Number of Pin from (0 ---> 15)
	(*Config_Register) &= ~(0xF << GET_CRLH_Position(PinConfig->GPIO_PinNumber) );
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	881b      	ldrh	r3, [r3, #0]
 8000260:	b29b      	uxth	r3, r3
 8000262:	4618      	mov	r0, r3
 8000264:	f7ff ff84 	bl	8000170 <GET_CRLH_Position>
 8000268:	4603      	mov	r3, r0
 800026a:	461a      	mov	r2, r3
 800026c:	230f      	movs	r3, #15
 800026e:	4093      	lsls	r3, r2
 8000270:	43da      	mvns	r2, r3
 8000272:	68bb      	ldr	r3, [r7, #8]
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	401a      	ands	r2, r3
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	601a      	str	r2, [r3, #0]

	// if Pin is Output
	if((PinConfig->GPIO_PinMode == GPIO_MODE_Output_PP) || (PinConfig->GPIO_PinMode == GPIO_MODE_Output_OD) || (PinConfig->GPIO_PinMode == GPIO_MODE_Output_AF_PP) || (PinConfig->GPIO_PinMode == GPIO_MODE_Output_AF_OD))
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	789b      	ldrb	r3, [r3, #2]
 8000280:	b2db      	uxtb	r3, r3
 8000282:	2b04      	cmp	r3, #4
 8000284:	d00e      	beq.n	80002a4 <MCAL_GPIO_Init+0x6e>
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	789b      	ldrb	r3, [r3, #2]
 800028a:	b2db      	uxtb	r3, r3
 800028c:	2b05      	cmp	r3, #5
 800028e:	d009      	beq.n	80002a4 <MCAL_GPIO_Init+0x6e>
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	789b      	ldrb	r3, [r3, #2]
 8000294:	b2db      	uxtb	r3, r3
 8000296:	2b06      	cmp	r3, #6
 8000298:	d004      	beq.n	80002a4 <MCAL_GPIO_Init+0x6e>
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	789b      	ldrb	r3, [r3, #2]
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	2b07      	cmp	r3, #7
 80002a2:	d110      	bne.n	80002c6 <MCAL_GPIO_Init+0x90>
	{
		Pin_Config = ( (((PinConfig->GPIO_PinMode - 4 ) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0F );
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	789b      	ldrb	r3, [r3, #2]
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	3b04      	subs	r3, #4
 80002ac:	009b      	lsls	r3, r3, #2
 80002ae:	b25a      	sxtb	r2, r3
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	78db      	ldrb	r3, [r3, #3]
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	b25b      	sxtb	r3, r3
 80002b8:	4313      	orrs	r3, r2
 80002ba:	b25b      	sxtb	r3, r3
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	f003 030f 	and.w	r3, r3, #15
 80002c2:	73fb      	strb	r3, [r7, #15]
 80002c4:	e033      	b.n	800032e <MCAL_GPIO_Init+0xf8>
	}
	// if Pin is Intput
	else
	{
		if((PinConfig->GPIO_PinMode == GPIO_MODE_Analog) || (PinConfig->GPIO_PinMode == GPIO_MODE_Input_FLO))
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	789b      	ldrb	r3, [r3, #2]
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d004      	beq.n	80002da <MCAL_GPIO_Init+0xa4>
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	789b      	ldrb	r3, [r3, #2]
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d108      	bne.n	80002ec <MCAL_GPIO_Init+0xb6>
		{

			Pin_Config = (( (PinConfig->GPIO_PinMode << 2) | 0x0 ) & 0x0F );
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	789b      	ldrb	r3, [r3, #2]
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	009b      	lsls	r3, r3, #2
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	f003 030f 	and.w	r3, r3, #15
 80002e8:	73fb      	strb	r3, [r7, #15]
 80002ea:	e020      	b.n	800032e <MCAL_GPIO_Init+0xf8>
		}
		else if(PinConfig->GPIO_PinMode == GPIO_MODE_AF_Input) //if Pin is AF Input
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	789b      	ldrb	r3, [r3, #2]
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	2b08      	cmp	r3, #8
 80002f4:	d102      	bne.n	80002fc <MCAL_GPIO_Init+0xc6>
		{
			Pin_Config = (( (GPIO_MODE_Input_FLO << 2) | 0x0 ) & 0x0F); //Consider if as Floating Input
 80002f6:	2304      	movs	r3, #4
 80002f8:	73fb      	strb	r3, [r7, #15]
 80002fa:	e018      	b.n	800032e <MCAL_GPIO_Init+0xf8>
		}
		else // PU Or PD Input
		{
			Pin_Config = (( (GPIO_MODE_Input_PU << 2) | 0x0 ) & 0x0F);
 80002fc:	2308      	movs	r3, #8
 80002fe:	73fb      	strb	r3, [r7, #15]

			if(PinConfig->GPIO_PinMode == GPIO_MODE_Input_PU)
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	789b      	ldrb	r3, [r3, #2]
 8000304:	b2db      	uxtb	r3, r3
 8000306:	2b02      	cmp	r3, #2
 8000308:	d108      	bne.n	800031c <MCAL_GPIO_Init+0xe6>
			{
				//PxODR = 1 Input Pull_UP :Table 20. Port bit configuration table
				GPIOx->ODR |= (PinConfig->GPIO_PinNumber);
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	881b      	ldrh	r3, [r3, #0]
 800030e:	b29a      	uxth	r2, r3
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	68db      	ldr	r3, [r3, #12]
 8000314:	431a      	orrs	r2, r3
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	60da      	str	r2, [r3, #12]
 800031a:	e008      	b.n	800032e <MCAL_GPIO_Init+0xf8>
			}
			else
			{
				//PxODR = 0 Input Pull_Down :Table 20. Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	881b      	ldrh	r3, [r3, #0]
 8000320:	b29b      	uxth	r3, r3
 8000322:	43da      	mvns	r2, r3
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	68db      	ldr	r3, [r3, #12]
 8000328:	401a      	ands	r2, r3
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	60da      	str	r2, [r3, #12]
			}
		}
	}
	// Set CNFx[1:0] MODEx[1:0] where x is Number of Pin from (0 ---> 15)
	(*Config_Register) |= (Pin_Config << (GET_CRLH_Position(PinConfig->GPIO_PinNumber)) );
 800032e:	7bfc      	ldrb	r4, [r7, #15]
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	881b      	ldrh	r3, [r3, #0]
 8000334:	b29b      	uxth	r3, r3
 8000336:	4618      	mov	r0, r3
 8000338:	f7ff ff1a 	bl	8000170 <GET_CRLH_Position>
 800033c:	4603      	mov	r3, r0
 800033e:	fa04 f203 	lsl.w	r2, r4, r3
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	431a      	orrs	r2, r3
 8000348:	68bb      	ldr	r3, [r7, #8]
 800034a:	601a      	str	r2, [r3, #0]
}
 800034c:	bf00      	nop
 800034e:	3714      	adds	r7, #20
 8000350:	46bd      	mov	sp, r7
 8000352:	bd90      	pop	{r4, r7, pc}

08000354 <MCAL_GPIO_ReadPin>:
 * @param [in]   -PinNumber : Specifies The Port bit to Read According  to @ref GPIO_PINS_Define
 * @retval		-The input Pin value (Two Values based on @ref GPIO_PIN_state
 * Note			-none
 */
uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx , uint16_t PinNumber)
{
 8000354:	b480      	push	{r7}
 8000356:	b085      	sub	sp, #20
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	460b      	mov	r3, r1
 800035e:	807b      	strh	r3, [r7, #2]
	uint8_t PinStatus;
	if( ((GPIOx->IDR) & PinNumber) != (uint32_t)GPIO_PIN_RESET)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	689a      	ldr	r2, [r3, #8]
 8000364:	887b      	ldrh	r3, [r7, #2]
 8000366:	4013      	ands	r3, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	d002      	beq.n	8000372 <MCAL_GPIO_ReadPin+0x1e>
	{
		PinStatus = GPIO_PIN_SET;
 800036c:	2301      	movs	r3, #1
 800036e:	73fb      	strb	r3, [r7, #15]
 8000370:	e001      	b.n	8000376 <MCAL_GPIO_ReadPin+0x22>
	}
	else
	{
		PinStatus = GPIO_PIN_RESET;
 8000372:	2300      	movs	r3, #0
 8000374:	73fb      	strb	r3, [r7, #15]
	}
	return PinStatus ;
 8000376:	7bfb      	ldrb	r3, [r7, #15]
}
 8000378:	4618      	mov	r0, r3
 800037a:	3714      	adds	r7, #20
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr

08000382 <MCAL_GPIO_TogglePin>:
 * @retval		-Result of Locking The Pin (OK --> Locking pin Success , Error --> Locking pin Failed)
 * 				 According to @ref GPIO_PIN_LOCK_State
 * Note			-none
 */
void MCAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx , uint16_t PinNumber)
{
 8000382:	b480      	push	{r7}
 8000384:	b083      	sub	sp, #12
 8000386:	af00      	add	r7, sp, #0
 8000388:	6078      	str	r0, [r7, #4]
 800038a:	460b      	mov	r3, r1
 800038c:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^= (PinNumber);
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	68da      	ldr	r2, [r3, #12]
 8000392:	887b      	ldrh	r3, [r7, #2]
 8000394:	405a      	eors	r2, r3
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	60da      	str	r2, [r3, #12]
}
 800039a:	bf00      	nop
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr

080003a4 <MCAL_GPIO_SET_Pin>:
	{
		return GPIO_RETURN_LOCK_ERROR;
	}
}
void MCAL_GPIO_SET_Pin(GPIO_TypeDef *GPIOx, uint16_t Pin_number, uint8_t mode, uint8_t speed)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	4608      	mov	r0, r1
 80003ae:	4611      	mov	r1, r2
 80003b0:	461a      	mov	r2, r3
 80003b2:	4603      	mov	r3, r0
 80003b4:	807b      	strh	r3, [r7, #2]
 80003b6:	460b      	mov	r3, r1
 80003b8:	707b      	strb	r3, [r7, #1]
 80003ba:	4613      	mov	r3, r2
 80003bc:	703b      	strb	r3, [r7, #0]
	GPIO_PINConfig_t PinConfig;
    PinConfig.GPIO_PinNumber = Pin_number;
 80003be:	887b      	ldrh	r3, [r7, #2]
 80003c0:	81bb      	strh	r3, [r7, #12]
    PinConfig.GPIO_PinMode = mode;
 80003c2:	787b      	ldrb	r3, [r7, #1]
 80003c4:	73bb      	strb	r3, [r7, #14]
    PinConfig.GPIO_Output_Speed = speed;
 80003c6:	783b      	ldrb	r3, [r7, #0]
 80003c8:	73fb      	strb	r3, [r7, #15]
    MCAL_GPIO_Init(GPIOx, &PinConfig);
 80003ca:	f107 030c 	add.w	r3, r7, #12
 80003ce:	4619      	mov	r1, r3
 80003d0:	6878      	ldr	r0, [r7, #4]
 80003d2:	f7ff ff30 	bl	8000236 <MCAL_GPIO_Init>
}
 80003d6:	bf00      	nop
 80003d8:	3710      	adds	r7, #16
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
	...

080003e0 <Clock_Init>:

#include "STM32F103x6.h"
#include "STM32F103C6_GPIO.h"

void Clock_Init()
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
	//Enable Init Clock GPIOA
	RCC_GPIOA_CLK_EN() ;
 80003e4:	4b07      	ldr	r3, [pc, #28]	; (8000404 <Clock_Init+0x24>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a06      	ldr	r2, [pc, #24]	; (8000404 <Clock_Init+0x24>)
 80003ea:	f043 0304 	orr.w	r3, r3, #4
 80003ee:	6193      	str	r3, [r2, #24]

	//Enable Init Clock GPIOB
	RCC_GPIOB_CLK_EN() ;
 80003f0:	4b04      	ldr	r3, [pc, #16]	; (8000404 <Clock_Init+0x24>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a03      	ldr	r2, [pc, #12]	; (8000404 <Clock_Init+0x24>)
 80003f6:	f043 0308 	orr.w	r3, r3, #8
 80003fa:	6193      	str	r3, [r2, #24]
}
 80003fc:	bf00      	nop
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	40021000 	.word	0x40021000

08000408 <GPIO_Init>:

void GPIO_Init()
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	//PA1 (Floating/High-Z) Input
	MCAL_GPIO_SET_Pin(GPIOA, GPIO_PIN_1,GPIO_MODE_Input_FLO, 0);
 800040c:	2300      	movs	r3, #0
 800040e:	2201      	movs	r2, #1
 8000410:	2102      	movs	r1, #2
 8000412:	480c      	ldr	r0, [pc, #48]	; (8000444 <GPIO_Init+0x3c>)
 8000414:	f7ff ffc6 	bl	80003a4 <MCAL_GPIO_SET_Pin>

	//PB1 Push_Pull Output / Output max speed 10 MHz.
	MCAL_GPIO_SET_Pin(GPIOB, GPIO_PIN_1,GPIO_MODE_Output_PP, GPIO_MAX_Speed_10M);
 8000418:	2301      	movs	r3, #1
 800041a:	2204      	movs	r2, #4
 800041c:	2102      	movs	r1, #2
 800041e:	480a      	ldr	r0, [pc, #40]	; (8000448 <GPIO_Init+0x40>)
 8000420:	f7ff ffc0 	bl	80003a4 <MCAL_GPIO_SET_Pin>

	//PA13 (Floating/High-Z) Input
	MCAL_GPIO_SET_Pin(GPIOA, GPIO_PIN_13,GPIO_MODE_Input_FLO, 0);
 8000424:	2300      	movs	r3, #0
 8000426:	2201      	movs	r2, #1
 8000428:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800042c:	4805      	ldr	r0, [pc, #20]	; (8000444 <GPIO_Init+0x3c>)
 800042e:	f7ff ffb9 	bl	80003a4 <MCAL_GPIO_SET_Pin>

	//PB13 Push_Pull Output / Output max speed 10 MHz.
	MCAL_GPIO_SET_Pin(GPIOB, GPIO_PIN_13,GPIO_MODE_Output_PP, GPIO_MAX_Speed_10M);
 8000432:	2301      	movs	r3, #1
 8000434:	2204      	movs	r2, #4
 8000436:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800043a:	4803      	ldr	r0, [pc, #12]	; (8000448 <GPIO_Init+0x40>)
 800043c:	f7ff ffb2 	bl	80003a4 <MCAL_GPIO_SET_Pin>
}
 8000440:	bf00      	nop
 8000442:	bd80      	pop	{r7, pc}
 8000444:	40010800 	.word	0x40010800
 8000448:	40010c00 	.word	0x40010c00

0800044c <delay>:

void delay(unsigned int x)
{
 800044c:	b480      	push	{r7}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	unsigned int i,j;
	for(i=0;i<x;i++)
 8000454:	2300      	movs	r3, #0
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	e00b      	b.n	8000472 <delay+0x26>
		for(j=0;j<255;j++);
 800045a:	2300      	movs	r3, #0
 800045c:	60bb      	str	r3, [r7, #8]
 800045e:	e002      	b.n	8000466 <delay+0x1a>
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	3301      	adds	r3, #1
 8000464:	60bb      	str	r3, [r7, #8]
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	2bfe      	cmp	r3, #254	; 0xfe
 800046a:	d9f9      	bls.n	8000460 <delay+0x14>
	for(i=0;i<x;i++)
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	3301      	adds	r3, #1
 8000470:	60fb      	str	r3, [r7, #12]
 8000472:	68fa      	ldr	r2, [r7, #12]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	429a      	cmp	r2, r3
 8000478:	d3ef      	bcc.n	800045a <delay+0xe>
}
 800047a:	bf00      	nop
 800047c:	3714      	adds	r7, #20
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr

08000484 <main>:
int main(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	Clock_Init();
 8000488:	f7ff ffaa 	bl	80003e0 <Clock_Init>
	GPIO_Init();
 800048c:	f7ff ffbc 	bl	8000408 <GPIO_Init>


	while(1)
	{
		// PA1 Bottom >> Pull_UP_R
		if( MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0) //Press
 8000490:	2102      	movs	r1, #2
 8000492:	4811      	ldr	r0, [pc, #68]	; (80004d8 <main+0x54>)
 8000494:	f7ff ff5e 	bl	8000354 <MCAL_GPIO_ReadPin>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d10b      	bne.n	80004b6 <main+0x32>
		{
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1); //Toggle LED
 800049e:	2102      	movs	r1, #2
 80004a0:	480e      	ldr	r0, [pc, #56]	; (80004dc <main+0x58>)
 80004a2:	f7ff ff6e 	bl	8000382 <MCAL_GPIO_TogglePin>
			while( (MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)) == 0);//Single Press
 80004a6:	bf00      	nop
 80004a8:	2102      	movs	r1, #2
 80004aa:	480b      	ldr	r0, [pc, #44]	; (80004d8 <main+0x54>)
 80004ac:	f7ff ff52 	bl	8000354 <MCAL_GPIO_ReadPin>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d0f8      	beq.n	80004a8 <main+0x24>
		}
		// PA13 Bottom >> Pull_Down_R
		if( MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13) == 1) // Multi Pressing
 80004b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ba:	4807      	ldr	r0, [pc, #28]	; (80004d8 <main+0x54>)
 80004bc:	f7ff ff4a 	bl	8000354 <MCAL_GPIO_ReadPin>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d104      	bne.n	80004d0 <main+0x4c>
		{
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);//Toggle LED
 80004c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ca:	4804      	ldr	r0, [pc, #16]	; (80004dc <main+0x58>)
 80004cc:	f7ff ff59 	bl	8000382 <MCAL_GPIO_TogglePin>
		}

		delay(1);
 80004d0:	2001      	movs	r0, #1
 80004d2:	f7ff ffbb 	bl	800044c <delay>
		if( MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0) //Press
 80004d6:	e7db      	b.n	8000490 <main+0xc>
 80004d8:	40010800 	.word	0x40010800
 80004dc:	40010c00 	.word	0x40010c00

080004e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004e0:	480d      	ldr	r0, [pc, #52]	; (8000518 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004e2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e8:	480c      	ldr	r0, [pc, #48]	; (800051c <LoopForever+0x6>)
  ldr r1, =_edata
 80004ea:	490d      	ldr	r1, [pc, #52]	; (8000520 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004ec:	4a0d      	ldr	r2, [pc, #52]	; (8000524 <LoopForever+0xe>)
  movs r3, #0
 80004ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f0:	e002      	b.n	80004f8 <LoopCopyDataInit>

080004f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f6:	3304      	adds	r3, #4

080004f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004fc:	d3f9      	bcc.n	80004f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fe:	4a0a      	ldr	r2, [pc, #40]	; (8000528 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000500:	4c0a      	ldr	r4, [pc, #40]	; (800052c <LoopForever+0x16>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000504:	e001      	b.n	800050a <LoopFillZerobss>

08000506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000508:	3204      	adds	r2, #4

0800050a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800050a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800050c:	d3fb      	bcc.n	8000506 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800050e:	f000 f811 	bl	8000534 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000512:	f7ff ffb7 	bl	8000484 <main>

08000516 <LoopForever>:

LoopForever:
    b LoopForever
 8000516:	e7fe      	b.n	8000516 <LoopForever>
  ldr   r0, =_estack
 8000518:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800051c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000520:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000524:	0800059c 	.word	0x0800059c
  ldr r2, =_sbss
 8000528:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800052c:	2000001c 	.word	0x2000001c

08000530 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000530:	e7fe      	b.n	8000530 <ADC1_2_IRQHandler>
	...

08000534 <__libc_init_array>:
 8000534:	b570      	push	{r4, r5, r6, lr}
 8000536:	2500      	movs	r5, #0
 8000538:	4e0c      	ldr	r6, [pc, #48]	; (800056c <__libc_init_array+0x38>)
 800053a:	4c0d      	ldr	r4, [pc, #52]	; (8000570 <__libc_init_array+0x3c>)
 800053c:	1ba4      	subs	r4, r4, r6
 800053e:	10a4      	asrs	r4, r4, #2
 8000540:	42a5      	cmp	r5, r4
 8000542:	d109      	bne.n	8000558 <__libc_init_array+0x24>
 8000544:	f000 f81a 	bl	800057c <_init>
 8000548:	2500      	movs	r5, #0
 800054a:	4e0a      	ldr	r6, [pc, #40]	; (8000574 <__libc_init_array+0x40>)
 800054c:	4c0a      	ldr	r4, [pc, #40]	; (8000578 <__libc_init_array+0x44>)
 800054e:	1ba4      	subs	r4, r4, r6
 8000550:	10a4      	asrs	r4, r4, #2
 8000552:	42a5      	cmp	r5, r4
 8000554:	d105      	bne.n	8000562 <__libc_init_array+0x2e>
 8000556:	bd70      	pop	{r4, r5, r6, pc}
 8000558:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800055c:	4798      	blx	r3
 800055e:	3501      	adds	r5, #1
 8000560:	e7ee      	b.n	8000540 <__libc_init_array+0xc>
 8000562:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000566:	4798      	blx	r3
 8000568:	3501      	adds	r5, #1
 800056a:	e7f2      	b.n	8000552 <__libc_init_array+0x1e>
 800056c:	08000594 	.word	0x08000594
 8000570:	08000594 	.word	0x08000594
 8000574:	08000594 	.word	0x08000594
 8000578:	08000598 	.word	0x08000598

0800057c <_init>:
 800057c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800057e:	bf00      	nop
 8000580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000582:	bc08      	pop	{r3}
 8000584:	469e      	mov	lr, r3
 8000586:	4770      	bx	lr

08000588 <_fini>:
 8000588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800058a:	bf00      	nop
 800058c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800058e:	bc08      	pop	{r3}
 8000590:	469e      	mov	lr, r3
 8000592:	4770      	bx	lr
