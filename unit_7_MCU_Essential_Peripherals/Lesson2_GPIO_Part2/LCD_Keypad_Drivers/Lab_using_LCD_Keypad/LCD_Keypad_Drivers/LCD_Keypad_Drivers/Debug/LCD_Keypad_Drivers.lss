
LCD_Keypad_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000308  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000308  0000037c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c38  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f1  00000000  00000000  000010d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000652  00000000  00000000  000018c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000194  00000000  00000000  00001f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c8  00000000  00000000  000020b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000546  00000000  00000000  00002578  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002abe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e0       	ldi	r30, 0x08	; 8
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 71 01 	call	0x2e2	; 0x2e2 <main>
  7a:	0c 94 82 01 	jmp	0x304	; 0x304 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <KEYPAD_Init>:
char KEYPAD_R[] ={R0,R1,R2,R3};
char KEYPAD_C[] ={C0,C1,C2,C3};

void KEYPAD_Init()
{
	DataDir_KEYPAD_PORT &= ~((1<<R0) | (1<<R1) | (1<<R2) | (1<<R3)); // Input Pins
  82:	81 b3       	in	r24, 0x11	; 17
  84:	80 7f       	andi	r24, 0xF0	; 240
  86:	81 bb       	out	0x11, r24	; 17
	DataDir_KEYPAD_PORT |= ((1<<C0)| (1<<C1) | (1<<C2) | (1<<C3));// Output Pins
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	80 6f       	ori	r24, 0xF0	; 240
  8c:	81 bb       	out	0x11, r24	; 17
	KEYPAD_PORT = 0xFF; 
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	82 bb       	out	0x12, r24	; 18
  92:	08 95       	ret

00000094 <KEYPAD_Get_Char>:
	
}

char KEYPAD_Get_Char()
{
  94:	0f 93       	push	r16
  96:	1f 93       	push	r17
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
	int i,j;
	for(i=0;i<4;i++)
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	50 e0       	ldi	r21, 0x00	; 0
  a0:	99 c0       	rjmp	.+306    	; 0x1d4 <KEYPAD_Get_Char+0x140>
	{
		KEYPAD_PORT |= ((1<<KEYPAD_C[0])| (1<<KEYPAD_C[1]) | (1<<KEYPAD_C[2]) | (1<<KEYPAD_C[3]));
  a2:	32 b3       	in	r19, 0x12	; 18
  a4:	e0 e6       	ldi	r30, 0x60	; 96
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	8c 01       	movw	r16, r24
  ae:	00 80       	ld	r0, Z
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <KEYPAD_Get_Char+0x22>
  b2:	00 0f       	add	r16, r16
  b4:	11 1f       	adc	r17, r17
  b6:	0a 94       	dec	r0
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <KEYPAD_Get_Char+0x1e>
  ba:	ec 01       	movw	r28, r24
  bc:	01 80       	ldd	r0, Z+1	; 0x01
  be:	02 c0       	rjmp	.+4      	; 0xc4 <KEYPAD_Get_Char+0x30>
  c0:	cc 0f       	add	r28, r28
  c2:	dd 1f       	adc	r29, r29
  c4:	0a 94       	dec	r0
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <KEYPAD_Get_Char+0x2c>
  c8:	dc 01       	movw	r26, r24
  ca:	02 80       	ldd	r0, Z+2	; 0x02
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <KEYPAD_Get_Char+0x3e>
  ce:	aa 0f       	add	r26, r26
  d0:	bb 1f       	adc	r27, r27
  d2:	0a 94       	dec	r0
  d4:	e2 f7       	brpl	.-8      	; 0xce <KEYPAD_Get_Char+0x3a>
  d6:	bc 01       	movw	r22, r24
  d8:	03 80       	ldd	r0, Z+3	; 0x03
  da:	02 c0       	rjmp	.+4      	; 0xe0 <KEYPAD_Get_Char+0x4c>
  dc:	66 0f       	add	r22, r22
  de:	77 1f       	adc	r23, r23
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <KEYPAD_Get_Char+0x48>
  e4:	2c 2f       	mov	r18, r28
  e6:	20 2b       	or	r18, r16
  e8:	2a 2b       	or	r18, r26
  ea:	26 2b       	or	r18, r22
  ec:	23 2b       	or	r18, r19
  ee:	22 bb       	out	0x12, r18	; 18
		KEYPAD_PORT &= ~(1<<KEYPAD_C[i]);
  f0:	22 b3       	in	r18, 0x12	; 18
  f2:	fa 01       	movw	r30, r20
  f4:	e0 5a       	subi	r30, 0xA0	; 160
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	00 80       	ld	r0, Z
  fa:	02 c0       	rjmp	.+4      	; 0x100 <KEYPAD_Get_Char+0x6c>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <KEYPAD_Get_Char+0x68>
 104:	80 95       	com	r24
 106:	82 23       	and	r24, r18
 108:	82 bb       	out	0x12, r24	; 18
		
		for(j=0;j<4;j++)
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	5c c0       	rjmp	.+184    	; 0x1c8 <KEYPAD_Get_Char+0x134>
		{
			if( !(KEYPAD_PIN & (1<<KEYPAD_R[j])) ) // check if key is pressed
 110:	80 b3       	in	r24, 0x10	; 16
 112:	fb 01       	movw	r30, r22
 114:	ec 59       	subi	r30, 0x9C	; 156
 116:	ff 4f       	sbci	r31, 0xFF	; 255
 118:	e0 81       	ld	r30, Z
 11a:	2e 2f       	mov	r18, r30
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <KEYPAD_Get_Char+0x90>
 120:	95 95       	asr	r25
 122:	87 95       	ror	r24
 124:	ea 95       	dec	r30
 126:	e2 f7       	brpl	.-8      	; 0x120 <KEYPAD_Get_Char+0x8c>
 128:	80 fd       	sbrc	r24, 0
 12a:	4c c0       	rjmp	.+152    	; 0x1c4 <KEYPAD_Get_Char+0x130>
			{
				while( !(KEYPAD_PIN & (1<<KEYPAD_R[j])) ); // For Single Press
 12c:	80 b3       	in	r24, 0x10	; 16
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 2e       	mov	r0, r18
 132:	02 c0       	rjmp	.+4      	; 0x138 <KEYPAD_Get_Char+0xa4>
 134:	95 95       	asr	r25
 136:	87 95       	ror	r24
 138:	0a 94       	dec	r0
 13a:	e2 f7       	brpl	.-8      	; 0x134 <KEYPAD_Get_Char+0xa0>
 13c:	80 ff       	sbrs	r24, 0
 13e:	f6 cf       	rjmp	.-20     	; 0x12c <KEYPAD_Get_Char+0x98>
				
				switch(i) // for columns
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	51 05       	cpc	r21, r1
 144:	c9 f0       	breq	.+50     	; 0x178 <KEYPAD_Get_Char+0xe4>
 146:	24 f4       	brge	.+8      	; 0x150 <KEYPAD_Get_Char+0xbc>
 148:	41 15       	cp	r20, r1
 14a:	51 05       	cpc	r21, r1
 14c:	41 f0       	breq	.+16     	; 0x15e <KEYPAD_Get_Char+0xca>
 14e:	3a c0       	rjmp	.+116    	; 0x1c4 <KEYPAD_Get_Char+0x130>
 150:	42 30       	cpi	r20, 0x02	; 2
 152:	51 05       	cpc	r21, r1
 154:	f1 f0       	breq	.+60     	; 0x192 <KEYPAD_Get_Char+0xfe>
 156:	43 30       	cpi	r20, 0x03	; 3
 158:	51 05       	cpc	r21, r1
 15a:	41 f1       	breq	.+80     	; 0x1ac <KEYPAD_Get_Char+0x118>
 15c:	33 c0       	rjmp	.+102    	; 0x1c4 <KEYPAD_Get_Char+0x130>
				{
					//column 0
					case 0 : 
					if(j == 0) return '7'; // for row 0 , column 0
 15e:	61 15       	cp	r22, r1
 160:	71 05       	cpc	r23, r1
 162:	f1 f1       	breq	.+124    	; 0x1e0 <KEYPAD_Get_Char+0x14c>
					else if(j == 1) return '4'; // for row 1 , column 0
 164:	61 30       	cpi	r22, 0x01	; 1
 166:	71 05       	cpc	r23, r1
 168:	e9 f1       	breq	.+122    	; 0x1e4 <KEYPAD_Get_Char+0x150>
					else if(j == 2) return '1'; // for row 2 , column 0
 16a:	62 30       	cpi	r22, 0x02	; 2
 16c:	71 05       	cpc	r23, r1
 16e:	e1 f1       	breq	.+120    	; 0x1e8 <KEYPAD_Get_Char+0x154>
					else if(j == 3) return '!'; // for row 3 , column 0
 170:	63 30       	cpi	r22, 0x03	; 3
 172:	71 05       	cpc	r23, r1
 174:	39 f5       	brne	.+78     	; 0x1c4 <KEYPAD_Get_Char+0x130>
 176:	3a c0       	rjmp	.+116    	; 0x1ec <KEYPAD_Get_Char+0x158>
					break;
					//column 1
					case 1 :
					if(j == 0) return '8'; // for row 0 , column 1
 178:	61 15       	cp	r22, r1
 17a:	71 05       	cpc	r23, r1
 17c:	c9 f1       	breq	.+114    	; 0x1f0 <KEYPAD_Get_Char+0x15c>
					else if(j == 1) return '5'; // for row 1 , column 1
 17e:	61 30       	cpi	r22, 0x01	; 1
 180:	71 05       	cpc	r23, r1
 182:	c1 f1       	breq	.+112    	; 0x1f4 <KEYPAD_Get_Char+0x160>
					else if(j == 2) return '2'; // for row 2 , column 1
 184:	62 30       	cpi	r22, 0x02	; 2
 186:	71 05       	cpc	r23, r1
 188:	b9 f1       	breq	.+110    	; 0x1f8 <KEYPAD_Get_Char+0x164>
					else if(j == 3) return '0'; // for row 3 , column 1
 18a:	63 30       	cpi	r22, 0x03	; 3
 18c:	71 05       	cpc	r23, r1
 18e:	d1 f4       	brne	.+52     	; 0x1c4 <KEYPAD_Get_Char+0x130>
 190:	35 c0       	rjmp	.+106    	; 0x1fc <KEYPAD_Get_Char+0x168>
					break;
					//column 2
					case 2 :
					if(j == 0) return '9'; // for row 0 , column 2
 192:	61 15       	cp	r22, r1
 194:	71 05       	cpc	r23, r1
 196:	a1 f1       	breq	.+104    	; 0x200 <KEYPAD_Get_Char+0x16c>
					else if(j == 1) return '6'; // for row 1 , column 2
 198:	61 30       	cpi	r22, 0x01	; 1
 19a:	71 05       	cpc	r23, r1
 19c:	99 f1       	breq	.+102    	; 0x204 <KEYPAD_Get_Char+0x170>
					else if(j == 2) return '3'; // for row 2 , column 2
 19e:	62 30       	cpi	r22, 0x02	; 2
 1a0:	71 05       	cpc	r23, r1
 1a2:	91 f1       	breq	.+100    	; 0x208 <KEYPAD_Get_Char+0x174>
					else if(j == 3) return '='; // for row 3 , column 2
 1a4:	63 30       	cpi	r22, 0x03	; 3
 1a6:	71 05       	cpc	r23, r1
 1a8:	69 f4       	brne	.+26     	; 0x1c4 <KEYPAD_Get_Char+0x130>
 1aa:	30 c0       	rjmp	.+96     	; 0x20c <KEYPAD_Get_Char+0x178>
					break;
					//column 3
					case 3 :
					if(j == 0) return '/'; // for row 0 , column 3
 1ac:	61 15       	cp	r22, r1
 1ae:	71 05       	cpc	r23, r1
 1b0:	79 f1       	breq	.+94     	; 0x210 <KEYPAD_Get_Char+0x17c>
					else if(j == 1) return '*'; // for row 1 , column 3
 1b2:	61 30       	cpi	r22, 0x01	; 1
 1b4:	71 05       	cpc	r23, r1
 1b6:	71 f1       	breq	.+92     	; 0x214 <KEYPAD_Get_Char+0x180>
					else if(j == 2) return '-'; // for row 2 , column 3
 1b8:	62 30       	cpi	r22, 0x02	; 2
 1ba:	71 05       	cpc	r23, r1
 1bc:	69 f1       	breq	.+90     	; 0x218 <KEYPAD_Get_Char+0x184>
					else if(j == 3) return '+'; // for row 3 , column 3
 1be:	63 30       	cpi	r22, 0x03	; 3
 1c0:	71 05       	cpc	r23, r1
 1c2:	61 f1       	breq	.+88     	; 0x21c <KEYPAD_Get_Char+0x188>
	for(i=0;i<4;i++)
	{
		KEYPAD_PORT |= ((1<<KEYPAD_C[0])| (1<<KEYPAD_C[1]) | (1<<KEYPAD_C[2]) | (1<<KEYPAD_C[3]));
		KEYPAD_PORT &= ~(1<<KEYPAD_C[i]);
		
		for(j=0;j<4;j++)
 1c4:	6f 5f       	subi	r22, 0xFF	; 255
 1c6:	7f 4f       	sbci	r23, 0xFF	; 255
 1c8:	64 30       	cpi	r22, 0x04	; 4
 1ca:	71 05       	cpc	r23, r1
 1cc:	0c f4       	brge	.+2      	; 0x1d0 <KEYPAD_Get_Char+0x13c>
 1ce:	a0 cf       	rjmp	.-192    	; 0x110 <KEYPAD_Get_Char+0x7c>
}

char KEYPAD_Get_Char()
{
	int i,j;
	for(i=0;i<4;i++)
 1d0:	4f 5f       	subi	r20, 0xFF	; 255
 1d2:	5f 4f       	sbci	r21, 0xFF	; 255
 1d4:	44 30       	cpi	r20, 0x04	; 4
 1d6:	51 05       	cpc	r21, r1
 1d8:	0c f4       	brge	.+2      	; 0x1dc <KEYPAD_Get_Char+0x148>
 1da:	63 cf       	rjmp	.-314    	; 0xa2 <KEYPAD_Get_Char+0xe>
					break;
				}
			}
		}
	}
	return 'N'; // No Key is Pressed
 1dc:	8e e4       	ldi	r24, 0x4E	; 78
 1de:	1f c0       	rjmp	.+62     	; 0x21e <KEYPAD_Get_Char+0x18a>
				
				switch(i) // for columns
				{
					//column 0
					case 0 : 
					if(j == 0) return '7'; // for row 0 , column 0
 1e0:	87 e3       	ldi	r24, 0x37	; 55
 1e2:	1d c0       	rjmp	.+58     	; 0x21e <KEYPAD_Get_Char+0x18a>
					else if(j == 1) return '4'; // for row 1 , column 0
 1e4:	84 e3       	ldi	r24, 0x34	; 52
 1e6:	1b c0       	rjmp	.+54     	; 0x21e <KEYPAD_Get_Char+0x18a>
					else if(j == 2) return '1'; // for row 2 , column 0
 1e8:	81 e3       	ldi	r24, 0x31	; 49
 1ea:	19 c0       	rjmp	.+50     	; 0x21e <KEYPAD_Get_Char+0x18a>
					else if(j == 3) return '!'; // for row 3 , column 0
 1ec:	81 e2       	ldi	r24, 0x21	; 33
 1ee:	17 c0       	rjmp	.+46     	; 0x21e <KEYPAD_Get_Char+0x18a>
					break;
					//column 1
					case 1 :
					if(j == 0) return '8'; // for row 0 , column 1
 1f0:	88 e3       	ldi	r24, 0x38	; 56
 1f2:	15 c0       	rjmp	.+42     	; 0x21e <KEYPAD_Get_Char+0x18a>
					else if(j == 1) return '5'; // for row 1 , column 1
 1f4:	85 e3       	ldi	r24, 0x35	; 53
 1f6:	13 c0       	rjmp	.+38     	; 0x21e <KEYPAD_Get_Char+0x18a>
					else if(j == 2) return '2'; // for row 2 , column 1
 1f8:	82 e3       	ldi	r24, 0x32	; 50
 1fa:	11 c0       	rjmp	.+34     	; 0x21e <KEYPAD_Get_Char+0x18a>
					else if(j == 3) return '0'; // for row 3 , column 1
 1fc:	80 e3       	ldi	r24, 0x30	; 48
 1fe:	0f c0       	rjmp	.+30     	; 0x21e <KEYPAD_Get_Char+0x18a>
					break;
					//column 2
					case 2 :
					if(j == 0) return '9'; // for row 0 , column 2
 200:	89 e3       	ldi	r24, 0x39	; 57
 202:	0d c0       	rjmp	.+26     	; 0x21e <KEYPAD_Get_Char+0x18a>
					else if(j == 1) return '6'; // for row 1 , column 2
 204:	86 e3       	ldi	r24, 0x36	; 54
 206:	0b c0       	rjmp	.+22     	; 0x21e <KEYPAD_Get_Char+0x18a>
					else if(j == 2) return '3'; // for row 2 , column 2
 208:	83 e3       	ldi	r24, 0x33	; 51
 20a:	09 c0       	rjmp	.+18     	; 0x21e <KEYPAD_Get_Char+0x18a>
					else if(j == 3) return '='; // for row 3 , column 2
 20c:	8d e3       	ldi	r24, 0x3D	; 61
 20e:	07 c0       	rjmp	.+14     	; 0x21e <KEYPAD_Get_Char+0x18a>
					break;
					//column 3
					case 3 :
					if(j == 0) return '/'; // for row 0 , column 3
 210:	8f e2       	ldi	r24, 0x2F	; 47
 212:	05 c0       	rjmp	.+10     	; 0x21e <KEYPAD_Get_Char+0x18a>
					else if(j == 1) return '*'; // for row 1 , column 3
 214:	8a e2       	ldi	r24, 0x2A	; 42
 216:	03 c0       	rjmp	.+6      	; 0x21e <KEYPAD_Get_Char+0x18a>
					else if(j == 2) return '-'; // for row 2 , column 3
 218:	8d e2       	ldi	r24, 0x2D	; 45
 21a:	01 c0       	rjmp	.+2      	; 0x21e <KEYPAD_Get_Char+0x18a>
					else if(j == 3) return '+'; // for row 3 , column 3
 21c:	8b e2       	ldi	r24, 0x2B	; 43
				}
			}
		}
	}
	return 'N'; // No Key is Pressed
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	08 95       	ret

00000228 <LCD_KICK>:
		{
			LCD_Write_Command(LCD_BEGIN_AT_FIRST_RAW + position);
		}
		else if(line == 2)
		{
			LCD_Write_Command(LCD_BEGIN_AT_SECOND_RAW + position);
 228:	88 b3       	in	r24, 0x18	; 24
 22a:	8e 7f       	andi	r24, 0xFE	; 254
 22c:	88 bb       	out	0x18, r24	; 24
 22e:	83 ed       	ldi	r24, 0xD3	; 211
 230:	90 e3       	ldi	r25, 0x30	; 48
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <LCD_KICK+0xa>
 236:	00 c0       	rjmp	.+0      	; 0x238 <LCD_KICK+0x10>
 238:	00 00       	nop
 23a:	88 b3       	in	r24, 0x18	; 24
 23c:	81 60       	ori	r24, 0x01	; 1
 23e:	88 bb       	out	0x18, r24	; 24
 240:	08 95       	ret

00000242 <LCD_isbusy>:
 242:	1a ba       	out	0x1a, r1	; 26
 244:	88 b3       	in	r24, 0x18	; 24
 246:	82 60       	ori	r24, 0x02	; 2
 248:	88 bb       	out	0x18, r24	; 24
 24a:	88 b3       	in	r24, 0x18	; 24
 24c:	8b 7f       	andi	r24, 0xFB	; 251
 24e:	88 bb       	out	0x18, r24	; 24
 250:	0e 94 14 01 	call	0x228	; 0x228 <LCD_KICK>
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	8a bb       	out	0x1a, r24	; 26
 258:	88 b3       	in	r24, 0x18	; 24
 25a:	8d 7f       	andi	r24, 0xFD	; 253
 25c:	88 bb       	out	0x18, r24	; 24
 25e:	08 95       	ret

00000260 <LCD_Write_Command>:
 260:	cf 93       	push	r28
 262:	c8 2f       	mov	r28, r24
 264:	0e 94 21 01 	call	0x242	; 0x242 <LCD_isbusy>
 268:	cb bb       	out	0x1b, r28	; 27
 26a:	88 b3       	in	r24, 0x18	; 24
 26c:	89 7f       	andi	r24, 0xF9	; 249
 26e:	88 bb       	out	0x18, r24	; 24
 270:	0e 94 14 01 	call	0x228	; 0x228 <LCD_KICK>
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <LCD_Clear_Screen>:
		}	
	}
}
void LCD_Clear_Screen(void)
{
	LCD_Write_Command(LCD_CLEAR_SCREEN);
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	0e 94 30 01 	call	0x260	; 0x260 <LCD_Write_Command>
 27e:	08 95       	ret

00000280 <LCD_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 280:	87 e8       	ldi	r24, 0x87	; 135
 282:	93 e1       	ldi	r25, 0x13	; 19
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <LCD_Init+0x4>
 288:	00 c0       	rjmp	.+0      	; 0x28a <LCD_Init+0xa>
 28a:	00 00       	nop
	LCD_CRTL &=  ~(1<<RW_SWITCH);
}
void LCD_Init(void)
{
	_delay_ms(20);
	LCD_isbusy();
 28c:	0e 94 21 01 	call	0x242	; 0x242 <LCD_isbusy>
	DataDir_LCD_CTRL |= (1<<RW_SWITCH | 1<<RS_SWITCH | 1<<ENABLE_SWITCH);//make (E,RS,RW) OUTPUT PINS
 290:	87 b3       	in	r24, 0x17	; 23
 292:	87 60       	ori	r24, 0x07	; 7
 294:	87 bb       	out	0x17, r24	; 23
	LCD_CRTL &= ~(1<<RW_SWITCH | 1<<RS_SWITCH | 1<<ENABLE_SWITCH);//make control pins off to do (reset/set) according the command we want to do after then
 296:	88 b3       	in	r24, 0x18	; 24
 298:	88 7f       	andi	r24, 0xF8	; 248
 29a:	88 bb       	out	0x18, r24	; 24
	DataDir_LCD_PORT = 0xFF; //  return PORTA work as Output
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	8a bb       	out	0x1a, r24	; 26
	LCD_Clear_Screen();	
 2a0:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_Clear_Screen>
	#ifdef	EIGHT_BIT_MODE		
	LCD_Write_Command(LCD_FUNCTION_8BIT_2LINES);
 2a4:	88 e3       	ldi	r24, 0x38	; 56
 2a6:	0e 94 30 01 	call	0x260	; 0x260 <LCD_Write_Command>
	#ifdef	FOUR_BIT_MODE
	LCD_Write_Command(0x02);
	LCD_Write_Command(LCD_FUNCTION_4BIT_2LINES);
	#endif	
	
	LCD_Write_Command(LCD_ENTRY_MODE);
 2aa:	86 e0       	ldi	r24, 0x06	; 6
 2ac:	0e 94 30 01 	call	0x260	; 0x260 <LCD_Write_Command>
	LCD_Write_Command(LCD_BEGIN_AT_FIRST_RAW);
 2b0:	80 e8       	ldi	r24, 0x80	; 128
 2b2:	0e 94 30 01 	call	0x260	; 0x260 <LCD_Write_Command>
	LCD_Write_Command(LCD_DISP_ON_CURSOR_BLINK);
 2b6:	8f e0       	ldi	r24, 0x0F	; 15
 2b8:	0e 94 30 01 	call	0x260	; 0x260 <LCD_Write_Command>
 2bc:	08 95       	ret

000002be <LCD_Write_Char>:
		LCD_KICK();
		
	#endif
}
void LCD_Write_Char(unsigned char data)
{
 2be:	cf 93       	push	r28
 2c0:	c8 2f       	mov	r28, r24
	LCD_isbusy();
 2c2:	0e 94 21 01 	call	0x242	; 0x242 <LCD_isbusy>
	#ifdef	EIGHT_BIT_MODE
		LCD_CRTL |= (1<<RS_SWITCH);		
 2c6:	88 b3       	in	r24, 0x18	; 24
 2c8:	84 60       	ori	r24, 0x04	; 4
 2ca:	88 bb       	out	0x18, r24	; 24
		LCD_PORT = data;
 2cc:	cb bb       	out	0x1b, r28	; 27
		// Write data Mode
		LCD_CRTL &= ~(1<<RW_SWITCH);
 2ce:	88 b3       	in	r24, 0x18	; 24
 2d0:	8d 7f       	andi	r24, 0xFD	; 253
 2d2:	88 bb       	out	0x18, r24	; 24
		LCD_CRTL |= (1<<RS_SWITCH);
 2d4:	88 b3       	in	r24, 0x18	; 24
 2d6:	84 60       	ori	r24, 0x04	; 4
 2d8:	88 bb       	out	0x18, r24	; 24
		LCD_KICK();		
 2da:	0e 94 14 01 	call	0x228	; 0x228 <LCD_KICK>
		LCD_CRTL |= (1<<RS_SWITCH);
		_delay_ms(1);
		LCD_KICK();
		
	#endif
}
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <main>:
#include "DIO_Interface.h"
#include "LCD.h"
#include "Keypad.h"
int main(void)
{
   LCD_Init();
 2e2:	0e 94 40 01 	call	0x280	; 0x280 <LCD_Init>
   KEYPAD_Init();
 2e6:	0e 94 41 00 	call	0x82	; 0x82 <KEYPAD_Init>
  // LCD_Write_Real_Number(9653.0332);// 9 number so 9 position will add to count variable
   char Pressed_Key;
   char count = 9;
    while (1) 
    {
		Pressed_Key = KEYPAD_Get_Char();
 2ea:	0e 94 4a 00 	call	0x94	; 0x94 <KEYPAD_Get_Char>
		switch(Pressed_Key)
 2ee:	81 32       	cpi	r24, 0x21	; 33
 2f0:	19 f0       	breq	.+6      	; 0x2f8 <main+0x16>
 2f2:	8e 34       	cpi	r24, 0x4E	; 78
 2f4:	d1 f3       	breq	.-12     	; 0x2ea <main+0x8>
 2f6:	03 c0       	rjmp	.+6      	; 0x2fe <main+0x1c>
		{
			case '!' :
			count = 0;
			LCD_Clear_Screen();
 2f8:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_Clear_Screen>
			break;
 2fc:	f6 cf       	rjmp	.-20     	; 0x2ea <main+0x8>
				LCD_Clear_Screen();
				LCD_GOTO_XY(1,0);
			}
			count++;
	*/	
			LCD_Write_Char(Pressed_Key);
 2fe:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_Write_Char>
			break;
 302:	f3 cf       	rjmp	.-26     	; 0x2ea <main+0x8>

00000304 <_exit>:
 304:	f8 94       	cli

00000306 <__stop_program>:
 306:	ff cf       	rjmp	.-2      	; 0x306 <__stop_program>
